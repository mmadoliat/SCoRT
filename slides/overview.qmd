---
title: "Short Course on R Tools"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format: 
  revealjs:
    transition: fade
    scrollable: true
---

## Motivating Example - What is Data Science?

![](images/webinar/dtsc/what-is-DS-1.png){.absolute left="200" height="600"}

. . .

![](images/webinar/dtsc/what-is-DS-2.png){.absolute left="200" height="600"}

. . .

![](images/webinar/dtsc/what-is-DS-3.png){.absolute left="200" height="600"}

. . .

![](images/webinar/dtsc/what-is-DS-4.png){.absolute left="200" height="600"}

. . .

![](images/webinar/dtsc/what-is-DS-5.png){.absolute left="200" height="600"}

## R vs Python

![](images/webinar/RvsP/RvsP-1.png){.absolute left="200" height="600"}

. . .

![](images/webinar/RvsP/RvsP-2.png){.absolute left="50" height="600"}

. . . 

![](images/webinar/RvsP/RvsP-3.png){.absolute left="150" height="600"}

. . . 

![](images/webinar/RvsP/RvsP-4.png){.absolute left="200" height="600"}

. . . 

![](images/webinar/RvsP/RvsP-5.png){.absolute left="50" height="600"}

. . . 

![](images/webinar/RvsP/RvsP-6.png){.absolute left="150" height="600"}

## Motivating Example - Functional Singular Spectrum Analysis {.title style="font-size: 27px;"}

![](images/webinar/dtsc/what-is-DS-5.png){.absolute top="72" left="200" height="600"}

. . .

![](images/webinar/fssa/what-is-FSSA.png){.absolute top="72" left="200" height="600"}

. . .

![](images/webinar/fssa/SSA-FSSA-01.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-11.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-12.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-13.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-02.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-03.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-04.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-05.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-06.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-07.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-08.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-09.png){.absolute left="220" height="620"}

. . .

![](images/webinar/fssa/SSA-FSSA-10.png){.absolute left="220" height="620"}

# Outline

::: {.fragment .fade-up}
-   Session 1. OOP in R
-   Session 2. Web Apps with Shiny
-   Session 3. Rcpp ‚Äì High Performance with C++ in R
-   Session 4. Python in R
-   Session 5. Build Your Own R Package
-   Session 6. CRAN Submission
-   Session 7. GitHub Essentials
:::

# üß† Session 1: OOP in R

## Motivating Example - OOP

![](images/webinar/oop/FTS-FSSA-Objects-01.png){.absolute width="450"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-02.png){.absolute left="50" top="300" width="900"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-03.png){.absolute left="50" top="300" width="900"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-04.png){.absolute left="50" top="300" width="900"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-05.png){.absolute left="50" top="300" width="900"}

## Motivating Example - OOP (Cont.)

![](images/webinar/oop/FTS-FSSA-Objects-06.png){.absolute width="450"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-07.png){.absolute left="250" top="290" width="600"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-08.png){.absolute left="250" top="290" width="600"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-09.png){.absolute left="250" top="290" width="600"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-10.png){.absolute left="250" top="290" width="600"}

. . .

![](images/webinar/oop/FTS-FSSA-Objects-15.png){.absolute right="0" top="160" width="560"} ![](images/webinar/oop/FTS-FSSA-Objects-10.png){.absolute left="250" top="290" width="600"}

## OOP in R

-   **üß© OOP Paradigms in R**:
    -   Functional OOP: `plot(lm(...))`
    -   Encapsulated OOP: `learner$train()`
    -   Modern tools: `mlr3`, `R6`, `S7`

. . .

-   **üèó OOP Systems**:
    -   **S3**: Lightweight & informal ‚Äî uses `UseMethod()`
    -   **S4**: Formal and type-safe ‚Äî uses `setClass()` and `@`
    -   **R6**: Mutable, used in apps like `shiny`
    -   **S7**: Newest and unified ‚Äî multiple dispatch

------------------------------------------------------------------------

## üõ†Ô∏è OOP in Practice

### üîÅ Comparison of Systems
<table>
  <thead>
    <tr>
      <th>Sys.</th>
      <th>Style</th>
      <th>Used In</th>
      <th>‚úÖ Pros</th>
      <th>‚ö†Ô∏è Cons</th>
    </tr>
  </thead>
  <tbody>
    <tr class="fragment">
      <td>S3</td>
      <td>Functional</td>
      <td>Base R</td>
      <td>Simple, extensible</td>
      <td>No schema, fragile</td>
    </tr>
    <tr class="fragment">
      <td>S4</td>
      <td>Formal</td>
      <td>Bioconductor</td>
      <td>Type-safe, robust</td>
      <td>Verbose, complex</td>
    </tr>
    <tr class="fragment">
      <td>R6</td>
      <td>Encapsulated</td>
      <td>Shiny, Keras</td>
      <td>Fast, mutable</td>
      <td>Weak type safety</td>
    </tr>
    <tr class="fragment">
      <td>S7</td>
      <td>Unified OOP</td>
      <td>Modern dev</td>
      <td>Combines S3 & S4 benefits</td>
      <td>Still evolving</td>
    </tr>
  </tbody>
</table>

# Session 2:üåê Web Apps with Shiny

## FSSA - Shiny {.title style="font-size: 12px;"}

<iframe class="stretch" data-src="https://fssa.shinyapps.io/FSSA/">

</iframe>

::: smallest
[üîó Open in a browser](https://fssa.shinyapps.io/FSSA/){target="_blank"}
:::

## Web Apps with Shiny

-   ‚ú® Shiny = Interactive web apps in pure R (no HTML/JS!)

. . .

-   üì¶ Components:
    -   ui: Layout, inputs/outputs
    -   server: Logic, reactivity

. . .

-   üîå Inputs & Outputs:
    -   Inputs: sliderInput(), textInput()
    -   Outputs: renderPlot(), renderText(), renderTable()

. . .

-   üß™ Use Cases:
    -   Dashboards, simulations, teaching tools

## Shiny Concepts & Deployment in Workshop

-   üöÄ **Deployment Options**:
    -   `shinyapps.io`, Posit Connect, university servers
    -   **shinylive**: deploy as static site (experimental)

. . .

::: {style="margin-top: -5px;"}
-   ‚ö°**Reactivity System**:
    -   `reactive()`: memoized reactive expressions
    -   `isolate()`: break reactive chains
    -   `observeEvent()`: trigger actions without outputs
:::

. . .

::: {style="margin-top: -5px;"}
-   üß† **Hands-on**:
    -   [Explore shinyapps gallery for inspiration](https://shiny.posit.co/gallery/)
:::

# ‚ö° Session 3: Rcpp ‚Äì <br> High Performance with C++ in R

## Context & Motivation

::: {.incremental style="margin-top: -18px;"}
-   **Diagonal averaging** is key in many algorithms (e.g. SSA reconstruction).\
    ![](images/webinar/fssa/SSA-FSSA-hankel.png){width="800"}
-   Given *any* matrix $G \in \mathbb{R}^{L\times K}$, we want $$
      \scriptsize{y_t = \frac{1}{\#\{(i,j):\,i+j-1 = t\}}
            \sum_{i+j-1 = t} G_{i,j},
      \quad t = 1,\dots, L+K-1.}
    $$
-   Pure‚ÄëR implementation uses two nested loops over $i$ and $j$.
:::

## Pure R Code

::: shrink-code
``` {.r code-line-numbers="1,16|2-6|8-13|15"}
hankelize_R <- function(X){
  L <- nrow(X)
  K <- ncol(X)
  N <- L + K - 1
  result <- numeric(N)
  count <- numeric(N)
 
  for(i in 1:L){
    for(j in 1:K){
      result[i + j - 1] <- result[i + j - 1] + X[i,j]
      count[i + j - 1] <- count[i + j - 1] + 1
    }
  }
 
  return(result / count)
}
```
:::

## Rcpp Code

::: shrink-code
``` {.r code-line-numbers="1|3,4,24|5-10|12-17|19-21|23"}
library(Rcpp)

cppFunction('
NumericVector hankelize_rcpp(NumericMatrix X) {
  int L = X.nrow();
  int K = X.ncol();
  int N = L + K - 1;
 
  NumericVector result(N);
  NumericVector count(N);
 
  for(int i = 0; i < L; i++){
    for(int j = 0; j < K; j++){
      result[i + j] += X(i,j);
      count[i + j] += 1;
    }
  }
 
  for(int i = 0; i < N; i++){
    result[i] /= count[i];
  }
 
  return result;
}')
```
:::

## Benchmark

::: shrink-code
``` {.r code-line-numbers="1|3-5|7-11|13-17"}
library(microbenchmark)

# Large random matrix (e.g., 100 x 1000)
set.seed(123)
X_large <- matrix(runif(1e5), nrow = 100, ncol = 1000)

bench <- microbenchmark(
  R_version = hankelize_R(X_large),
  Rcpp_version = hankelize_rcpp(X_large),
  times = 10
)

print(bench)
># Unit: microseconds
>#          expr     min      lq     mean   median      uq     max neval
>#     R_version 21225.1 21550.8 26604.53 25180.35 30969.3 34455.1    10
>#  Rcpp_version   176.9   177.8   299.87   194.50   253.7  1161.3    10
```
:::

::: {.incremental .small}
-   Dramatic speedup: **\~89√ó** faster.
-   Pattern can be applied to many $O(n^2)$ tasks in time series, spatial stats, and beyond.
:::

## üî¨ Rcpp in Action

-   üöÄ **Rcpp** bridges R and C++ for high-performance computing.
-   üèÅ Use cases:
    -   Speed up loops, recursion, and matrix operations
    -   Access C++ libraries and STL
    -   Integrate C++ in R packages

# üêç 4. Python in R {transition="slide"}

## üîÅ Example: Use Python from R {.smaller}

::::: columns
::: {.column width="50%"}
**üêç Native Python**

``` python
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
iris = load_iris()
X, y = iris.data, iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
mlp = MLPClassifier(hidden_layer_sizes=(10,))
mlp.fit(X_train, y_train)
y_pred = mlp.predict(X_test)
```
:::
::: {.column width="50%"}
::: {.fragment .fade-up}
**üì¶ R with reticulate**
``` r
library(reticulate)
sklearn <- import("sklearn")
model_selection <- sklearn$model_selection
neural_network <- sklearn$neural_network
X <- as.matrix(iris[, 1:4])         
y <- as.integer(iris$Species) - 1     
train_test <- model_selection$train_test_split(X, y, test_size = 0.2, random_state = 42)
X_train <- train_test[[1]]
X_test <- train_test[[2]]
y_train <- train_test[[3]]
y_test <- train_test[[4]]
mlp <- neural_network$MLPClassifier(hidden_layer_sizes = tuple(10L))
mlp$fit(X_train, y_train)
y_pred <- mlp$predict(X_test)
```
:::
:::


:::::

## üí° Why Call Python in R? {transition="convex"}

::: incremental
-   üîÑ **Avoid rewriting code** from one language to another
-   üîÅ **Call shared models** or preprocessing functions written in Python
-   üì¶ **Reuse Python packages** or APIs within your R workflow
-   üì§ **Publish reproducible reports** that include both R and Python code
:::

## What is `reticulate`?

::: incremental
-   R package for interoperability with Python
-   Maintains a shared Python session accessible from R
-   Automatic conversion of many R types to Python and vice versa
-   Supports inline Python code in R Markdown and R scripts
:::

## üé• Demo: Python from R in RStudio

{{< video images/python/reticulate.mp4 >}}



# üì¶ 5. Build Your Own R Package

## üí° Motivations to Package Your Code

üß∞ **Why build a package?**

::: incremental
-   ‚ôªÔ∏è Reuse and organize reusable code chunks
-   üìñ Provide **documentation** and **examples**
-   üß™ Add **unit tests** to ensure reliability
-   üåê Distribute:
    -   via **CRAN** for wide access
    -   via **GitHub** for collaborative development
    -   or keep it **private** for internal use
:::

## üèó Package Structure Overview

``` text
mypkg/
‚îú‚îÄ‚îÄ DESCRIPTION         # üìã Package metadata
‚îú‚îÄ‚îÄ NAMESPACE           # üîÅ Exported functions & imports
‚îú‚îÄ‚îÄ R/                  # üìÇ Your R functions
‚îî‚îÄ‚îÄ man/                # üìö Auto-generated documentation
```

. . .

üí° Other folders you may add:

::: incremental
-   üìÇ **tests/** ‚Üí Unit tests (testthat)
-   üìÇ **vignettes/** ‚Üí Long-form docs
-   üìÇ **data/** ‚Üí Internal or example datasets
:::

## üé• Demo: Rfssa Package

{{< video images/package/rfssa_pack.mp4 >}}

## üõ† Package States in R {transition="zoom"}

R packages transition through five development states:

::: incremental
-   üóÇÔ∏è **Source**: your raw package folder
-   üì¶ **Bundled**: compressed .tar.gz for sharing
-   üß± **Binary**: platform-specific precompiled version
-   üìö **Installed**: available in your R library
-   üß† **In-Memory**: actively loaded via library()
:::

## üîÅ Transitioning Between States 

![](images/package/install-load.png){fig-align="center" fig-alt="Screenshot of Pagerank" width="55%"}



# 6. üì§ CRAN Submitting {transition="zoom"}

## üöÄ Submitting to CRAN

::: incremental
-   üì¶ **CRAN** = Comprehensive R Archive Network\
-   üéØ Goal: Make your R package **public, discoverable, and installable**
-   ‚úî Must pass `R CMD check` with:
    -   ‚ùå No **ERRORs**
    -   ‚ö†Ô∏è No **WARNINGs**
    -   üìù Minimal and justifiable **NOTEs**
-   üì§ Submit with: `devtools::release()`
:::

## üì© Confirmation Email (After Submission) {transition="zoom"}

![](images/package/submission_confirm.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="55%"}

------------------------------------------------------------------------

## üì¨ Submission Confirmed Email {transition="zoom"}

![](images/package/submission_confirm2.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="95%"}

## ‚è≥ Pending Manual Inspection Email {transition="zoom"}

![](images/package/auto-pros.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="95%"}

## ‚úÖ Package Initially Accepted Email {transition="zoom"}

![](images/package/accepted.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="55%"}

::: fragment
> üéâ Good news!
:::

## üì¶ Package Built on CRAN Email {transition="zoom"}

![](images/package/accept2.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="55%"}

::: fragment
> üß± CRAN has built binaries for major platforms (Windows, ...).
:::

## üåê CRAN Page Created {transition="zoom"}

![](images/package/Cran_Rfssa.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="55%"}

> üåç Your package is now live! Searchable and installable via:

``` r
install.packages("Rfssa")
```

# 7. üì§ GitHub Essentials {transition="convex"}

## üì¨ Example: Rfssa Package Github {transition="zoom"}

![](images/package/Github_Rfssa.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="95%"}


## üåç Why Use Git & GitHub?

::: incremental
-   üîÅ **Version Control**: Track and manage changes in code
-   ü§ù **Collaboration**: Work with others without overwriting files
-   üß™ **Reproducibility**: Restore older versions when bugs occur
-   üîÑ **Open Source**: Share your package with the world
:::

::: fragment
> üß∞ Git = Local tracking tool\
> ‚òÅÔ∏è GitHub = Online hosting and teamwork platform
:::

## üîÅ Daily Git Workflow in RStudio

> üéØ A typical work cycle for package developers:

::: {.fragment .fade-right}
| Step      | Description                           |
|-----------|---------------------------------------|
| ‚úèÔ∏è Edit   | Make changes to `.R` or `.Rmd` files  |
| ‚úÖ Stage  | Select files to track in Git tab      |
| üí¨ Commit | Save with a message (e.g., "Fix bug") |
| üöÄ Push   | Send to GitHub                        |
:::


## üé• Demo: Rfssa Github Package

{{< video images/package/Github.mp4 >}}

# üôè Thank you!

Questions & Discussion
