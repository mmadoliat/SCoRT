---
title: "Short Course on R Tools"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format: 
  revealjs:
    transition: fade
    scrollable: true
---

# 🐍 4. Python in R {transition="slide"}

## 💡 Why Call Python in R? {transition="convex"}

::: incremental
-   🔄 **Avoid rewriting code** from one language to another
-   🔁 **Call shared models** or preprocessing functions written in Python
-   📦 **Reuse Python packages** or APIs within your R workflow
-   📤 **Publish reproducible reports** that include both R and Python code
:::

## What is `reticulate`?

::: incremental
-   R package for interoperability with Python
-   Maintains a shared Python session accessible from R
-   Automatic conversion of many R types to Python and vice versa
-   Supports inline Python code in R Markdown and R scripts
:::

## 🎥 Demo: Python from R in RStudio

{{< video images/python/reticulate.mp4 >}}

## 🔁 Example: Use Python from R {.smaller}

::::::: columns
:::: {.column width="50%"}
**📦 R with reticulate**
```r
library(reticulate)
sklearn <- import("sklearn")
model_selection <- sklearn$model_selection
neural_network <- sklearn$neural_network
X <- as.matrix(iris[, 1:4])         
y <- as.integer(iris$Species) - 1     
train_test <- model_selection$train_test_split(X, y, test_size = 0.2, random_state = 42)
X_train <- train_test[[1]]
X_test <- train_test[[2]]
y_train <- train_test[[3]]
y_test <- train_test[[4]]
mlp <- neural_network$MLPClassifier(hidden_layer_sizes = tuple(10L))
mlp$fit(X_train, y_train)
y_pred <- mlp$predict(X_test)
```
::::

:::: {.column width="50%"}
**🐍 Native Python**
```python
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
iris = load_iris()
X, y = iris.data, iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
mlp = MLPClassifier(hidden_layer_sizes=(10,))
mlp.fit(X_train, y_train)
y_pred = mlp.predict(X_test)
```
::::
:::::::

# 📦 5. Build Your Own R Package

## 💡 Motivations to Package Your Code

🧰 **Why build a package?**

::: incremental
-   ♻️ Reuse and organize reusable code chunks
-   📖 Provide **documentation** and **examples**
-   🧪 Add **unit tests** to ensure reliability
-   🌐 Distribute:
    -   via **CRAN** for wide access
    -   via **GitHub** for collaborative development
    -   or keep it **private** for internal use
:::


## 🏗 Package Structure Overview

``` text
mypkg/
├── DESCRIPTION         # 📋 Package metadata
├── NAMESPACE           # 🔁 Exported functions & imports
├── R/                  # 📂 Your R functions
└── man/                # 📚 Auto-generated documentation
```

. . .

💡 Other folders you may add:

::: incremental
-   📂 **tests/** → Unit tests (testthat)
-   📂 **vignettes/** → Long-form docs
-   📂 **data/** → Internal or example datasets
:::

## 🛠 Package States in R {transition="zoom"}

R packages transition through five development states:

::: incremental
-   🗂️ **Source**: your raw package folder
-   📦 **Bundled**: compressed .tar.gz for sharing
-   🧱 **Binary**: platform-specific precompiled version
-   📚 **Installed**: available in your R library
-   🧠 **In-Memory**: actively loaded via library()
:::

::: {.fragment .fade-up}
> Understanding these states helps you manage installation, sharing, and usage workflows.
:::

## 🔁 Transitioning Between States {transition="convex"}

![](images/package/install-load.png){fig-align="center" fig-alt="Screenshot of Pagerank" width="55%"}

## 🎥 Demo: Rfssa Package 

{{< video images/package/rfssa_pack.mp4 >}}



# 6. 📤 CRAN Submitting {transition="zoom"}

## 🚀 Submitting to CRAN

::: incremental
-   📦 **CRAN** = Comprehensive R Archive Network\
-   🎯 Goal: Make your R package **public, discoverable, and installable**
-   ✔ Must pass `R CMD check` with:
    -   ❌ No **ERRORs**
    -   ⚠️ No **WARNINGs**
    -   📝 Minimal and justifiable **NOTEs**
-   🧪 Simulate checks: `rhub::check_for_cran()`
-   📤 Submit with: `devtools::release()`
-   ⏱️ Response in approx **1–3 days**
:::

## 📩 Confirmation Email (After Submission) {transition="zoom"}

![](images/package/submission_confirm.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="55%"}

------------------------------------------------------------------------

## 📬 Submission Confirmed Email {transition="zoom"}

![](images/package/submission_confirm2.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="95%"}

## ⏳ Pending Manual Inspection Email {transition="zoom"}

![](images/package/auto-pros.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="95%"}

## ✅ Package Initially Accepted Email {transition="zoom"}

![](images/package/accepted.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="55%"}

::: fragment
> 🎉 Good news!
:::

## 📦 Package Built on CRAN Email {transition="zoom"}

![](images/package/accept2.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="55%"}

::: fragment
> 🧱 CRAN has built binaries for major platforms (Windows, ...).
:::

## 🌐 CRAN Page Created {transition="zoom"}

![](images/package/Cran_Rfssa.png){fig-align="left" fig-alt="Screenshot of Pagerank" width="55%"}

> 🌍 Your package is now live! Searchable and installable via:

``` r
install.packages("Rfssa")
```

# 7. 📤 GitHub Essentials {transition="convex"}

------------------------------------------------------------------------

## 🌍 Why Use Git & GitHub?

::: incremental
-   🔁 **Version Control**: Track and manage changes in code
-   🤝 **Collaboration**: Work with others without overwriting files
-   🧪 **Reproducibility**: Restore older versions when bugs occur
-   🔄 **Open Source**: Share your package with the world
:::

::: fragment
> 🧰 Git = Local tracking tool\
> ☁️ GitHub = Online hosting and teamwork platform
:::

## 🧰 Git & GitHub from RStudio {transition="convex"}

✅ RStudio has built-in Git integration:

::: {.fragment .custom .blur}
-   Git tab for **staging, committing, and pushing**
:::

::: {.fragment .custom .blur}
-   Visual diff and commit history
:::

::: {.fragment .custom .blur}
-   Push to GitHub without leaving RStudio
:::

## 🔧 Set Up GitHub in R {transition="concave"}

. . .

1.  ✅ **Install Git** ([git-scm.com](https://git-scm.com))

. . .

2.  🔑 **Create Personal Access Token (PAT)**:

``` r
usethis::create_github_token()
gitcreds::gitcreds_set()
```

. . .

3.  🔗 **Link your project to GitHub**:

``` r
usethis::use_github()
```

> 🎉 Your RStudio project is now connected to GitHub!

## 📦 Create a Git-Enabled R Package Project

1.  `File` → `New Project` → `New Directory` → `R Package`

. . .

2.  ✅ Check **"Create a git repository"**

. . .

3.  Inside the project:

``` r
usethis::use_git()
usethis::use_github()
```

. . .

> 📁 You now have a `.git` repo and a linked GitHub project!

------------------------------------------------------------------------

## 🔁 Daily Git Workflow in RStudio

> 🎯 A typical work cycle for package developers:

::: {.fragment .fade-right}
| Step      | Description                           |
|-----------|---------------------------------------|
| ✏️ Edit   | Make changes to `.R` or `.Rmd` files  |
| ✅ Stage  | Select files to track in Git tab      |
| 💬 Commit | Save with a message (e.g., "Fix bug") |
| 🚀 Push   | Send to GitHub                        |
:::

. . .

## 🧪 Example: Collaborative Workflow

::: {.fragment .custom .blur}
1.  You write a new function: `plot_confidence()`
:::

::: {.fragment .custom .blur}
2.  Commit message: `"Add CI plot to visual module"`
:::

::: {.fragment .custom .blur}
3.  Push to GitHub → colleague reviews & suggests changes
:::

## ✅ GitHub for Package Development

::: incremental
-   📦 Host your package openly
-   🧪 Enable collaborative testing & documentation
-   📤 Submit to CRAN from a clean version-controlled repo
-   🔁 Great for long-term maintenance and open-source visibility
:::

::: {.fragment .fade-right}
> 🎯 If you publish your package, link the GitHub repo in `DESCRIPTION`
:::

## 📚 Resources

-   📘 Happy Git with R: <https://happygitwithr.com>
-   🔧 usethis: <https://usethis.r-lib.org>
-   🧪 gitcreds: <https://github.com/r-lib/gitcreds>
-   📂 GitHub Docs: <https://docs.github.com/>

# 🙏 Thank you!

Questions & Discussion
