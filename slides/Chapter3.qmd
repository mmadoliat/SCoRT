---
title: "Short Course on R Tools"
subtitle: "Manage and collaborate via GitHub"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format: 
  revealjs:
    transition: fade
    scrollable: true
---

# Outline

::: {.fragment .fade-up}
-   Version Control Essentials
-   Git & GitHub Basics
-   Setting Up in RStudio
-   Common Git Workflows
-   Branching & Pull Requests
-   Collaborating with Issues & Projects
-   GitHub Actions for R Projects
-   Managing Releases & Packages
-   Best Practices & Tips
-   Hands-on Exercises
:::

# 1. Version Control Essentials

-   **Why version control?** track changes, revert mistakes, collaborate
-   **Key concepts**: repository, commit, history, diff, staging
-   **Git vs GitHub**: local tool vs remote hosting service

??? note Emphasize reproducibility and collaborative benefits.

# 2. Git & GitHub Basics

-   **Install Git**: download & configure `user.name`, `user.email`
-   **GitHub account**: create, generate SSH key, add to GitHub
-   **First repo**:

``` bash
git init myproject
cd myproject
git remote add origin [git@github.com](mailto:git@github.com)\:username/myproject.git
```

??? note Show GitHub SSH key setup screen.

# 3. Setting Up in RStudio

-   **usethis helpers**:

``` {.r}
usethis::create_project("myproject", rstudio = TRUE)
usethis::use_git()
usethis::use_github()
```

-   **RStudio Git pane**: commit, diff, push, pull
-   **.gitignore**: generated by `use_git_ignore()`

??? note Demonstrate one-click setup in RStudio IDE.

# 4. Common Git Workflows

| Workflow       | Use Case                            |
|----------------|-------------------------------------|
| Centralized    | solo projects, simple collaboration |
| Fork & PR      | open-source contributions           |
| Feature Branch | team feature development, isolation |

-   **Syncing forks** with upstream
-   **Rebasing** vs merging

??? note Recommend feature-branch workflow for teams.

# 5. Branching & Pull Requests

-   **Create branch**:

``` bash
git checkout -b feature-x
```

-   **Work & commit**, then push:

``` bash
git push -u origin feature-x
```

-   **Open PR** on GitHub: describe changes, assign reviewers
-   **Review & merge**: code review, address comments

??? note Show pull request UI with examples.

# 6. Collaborating with Issues & Projects

-   **Issues**: bug reports, feature requests
-   **Labels & milestones**: categorize and plan work
-   **Projects**: Kanban boards in GitHub
-   **Link commits & PRs**: `Fixes #123`

??? note Create a sample issue and link a PR to it.

# 7. GitHub Actions for R Projects

-   **CI/CD**: automate checks, tests, pkg build
-   **Standard workflow**: `check-standard` via usethis

``` yaml
# .github/workflows/R-CMD-check.yaml
name: R-CMD-check
on: [push, pull_request]
jobs:
  R-CMD-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-pandoc@v2
      - run: Rscript -e 'devtools::install(); devtools::check()'
```

-   **Badges**: display build status in README

??? note Demonstrate adding a CI badge via `use_github_action_badge()`.

# 8. Managing Releases & Packages

-   **Release branches** or tags:

``` bash
git tag -a v1.0.0 -m "Initial release"
git push --tags
```

-   **GitHub Releases**: draft release notes, attach artifacts
-   **pkgdown**: build website, auto-deploy via Actions
-   **CRAN submissions**: trigger release workflow

??? note Show sample pkgdown YAML and GitHub Pages setup.

# 9. Best Practices & Tips

-   **Commit messages**: short summary + body
-   **Code review**: consistent style, meaningful feedback
-   **Rebase vs merge**: keep history clean
-   **Large files**: use Git LFS, avoid binary data
-   **Security**: secret management, PAT scopes

??? note Provide link to GitHub security best practices.

# 10. Hands-on Exercises (30 min)

1.  **Initialize** a new RStudio project with Git & GitHub
2.  **Create branch**, add function, push, open PR
3.  **Set up** GitHub Actions for R-CMD-check
4.  **Draft** a GitHub issue and link to PR

??? note Split into groups; review each otherâ€™s repos.

# Resources & Further Reading

-   **Happy Git & GitHub for the useR**: <https://happygitwithr.com/>
-   **usethis**: <https://usethis.r-lib.org>
-   **GitHub Docs**: workflows, Actions, projects

??? note Encourage exploring book chapters and cheat sheets.

# Q&A

-   Questions on Git commands?
-   Collaboration challenges?
-   CI/CD integrations?

# Thank You

-   Happy collaborating on GitHub with R!
