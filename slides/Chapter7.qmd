---
title: "Short Course on R Tools"
subtitle: "Chapter 7 - Monte Carlo Methods in Inference"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format: 
  revealjs:
    transition: fade
    scrollable: true
---

# Outline

::: {.fragment .fade-up}
-   Why reticulate?
-   Installation & Setup
-   Managing Python Environments
-   Executing Python Code in R
-   Python Objects & Data Conversion
-   Sourcing Python Scripts & Modules
-   Advanced Interoperability
-   reticulate in R Markdown & Quarto
-   Shiny & Python Integration
-   Debugging & Best Practices
-   Hands-on Exercises
:::

# 1. Why reticulate?

* **Bridging worlds**: seamless R â†” Python integration
* **Leverage ecosystems**: use pandas, scikit-learn, TensorFlow
* **Reproducibility**: single script combining best of both

??? note
Highlight common use cases: data science pipelines, ML workflows.

# 2. Installation & Setup

```{.r}
install.packages("reticulate")
library(reticulate)
```

* **Configure Python**:

  * `py_config()` to inspect current setup
  * `use_python("/usr/bin/python3")`
* **Check availability**: `py_available()`

??? note
Demonstrate `py_config()` output and path selection.

# 3. Managing Python Environments

* **Virtualenv**:

  ```{.r}
  virtualenv_create("r-reticulate")
  virtualenv_install("r-reticulate", "numpy", "pandas")
  use_virtualenv("r-reticulate", required = TRUE)
  ```
* **Conda**:

  ```{.r}
  conda_create("r-reticulate", packages = c("numpy", "pandas"))
  use_condaenv("r-reticulate", required = TRUE)
  ```

??? note
Emphasize isolating project dependencies.

# 4. Executing Python Code in R

* **Inline code**:

  ```{.r}
  py_run_string("import math; x = math.sqrt(16)")
  py$x  # 4
  ```
* **Evaluating expressions**:

```{.r}
py_eval("2 + 2")  # 4
```

??? note
Show retrieval of Python variable into R.

# 5. Python Objects & Data Conversion

* **Basic types**: numeric, integer, logical, character
* **Vectors & lists** auto-convert
* **Data frames**:

```{.r}
pd <- import("pandas")
df_py <- pd$DataFrame(list(x = c(1,2,3), y = c("a","b","c")))
df_r <- py_to_r(df_py)
```
* **Round-trip**: `r_to_py()`

??? note
Compare R `data.frame()` vs pandas DataFrame.

# 6. Sourcing Python Scripts & Modules

* **source\_python**: load `.py` file

```{.r}
source_python("utils.py")
result <- py_func(10)
```
* **import**:

  ```{.r}
  utils <- import_from_path("utils", path = ".")
  utils$py_func(10)
  ```

??? note
Demonstrate writing a simple Python helper module.

# 7. Advanced Interoperability

* **Reticulate classes**: work with Python classes

```{.r}
PyClass <- import("mymodule")$MyClass
obj <- PyClass$new(5)
obj$compute()
```
* **Callbacks**:

  * Pass R functions to Python: `r_to_py(my_r_fn)`
* **NumPy & arrays**: memory sharing

??? note
Show example of calling scikit-learn classifier from R.

# 8. reticulate in R Markdown & Quarto

````markdown
```{.python}
import numpy as np
x = np.arange(10)
```

````

- **Chunk engines**: `{python}`, `{python3}`
- **Return to R**:
```{.r}
r_vec <- py$x
```

* **Quarto YAML**:

```yaml
execute:
  echo: true
```

??? note
Illustrate inline Python in a Quarto document.

# 9. Shiny & Python Integration

```{.r}
library(shiny)
ui <- fluidPage(
  actionButton("btn", "Compute Python"),
  verbatimTextOutput("out")
)
server <- function(input, output) {
  observeEvent(input$btn, {
    py_run_string("import math; res = math.factorial(10)")
    output$out <- renderText(py$res)
  })
}
shinyApp(ui, server)
```

* **Use cases**: ML inference, data preprocessing

??? note
Live demo of Python-based analytics in Shiny.

# 10. Debugging & Best Practices

* **Error tracing**: inspect Python tracebacks
* **Suppress startup**: `use_python(..., required=TRUE)`
* **Version control**: lock `requirements.txt`
* **Performance**: minimize data copying

??? note
Tips for reproducible and robust integrations.

# 11. Hands-on Exercises (30 min)

1. **Create environment** and import a Python library (e.g., seaborn)
2. **Write Python function** in `.py` and call it from R
3. **Convert** a pandas DataFrame to R and back
4. **Embed** Python chunk in a Quarto doc and render

??? note
Pair programming; share code snippets.

# Resources & Further Reading

* reticulate docs: [https://rstudio.github.io/reticulate/](https://rstudio.github.io/reticulate/)
* Tutorials: RStudio blog posts
* Community: RStudio Community forums

??? note
Encourage exploring advanced use cases.

# Q\&A

* Questions on environment management?
* Real-world integration scenarios?

# Thank You

* Happy Python + R coding!
