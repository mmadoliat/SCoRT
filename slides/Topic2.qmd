---
title: "Short Course on R Tools"
subtitle: "Building Interactive Web Apps with Shiny"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format:
  revealjs:
    transition: fade
    scrollable: true
---

# Outline

::: {.fragment .fade-up}
-   Introduction to Shiny
-   App Structure: UI & Server
-   Inputs, Outputs, & Reactivity
-   Reactive Programming Patterns
-   Layouts & Styling
-   Modules for Reusable Components
-   Advanced Topics: JavaScript, HTML, CSS
-   Deployment & Best Practices
-   Hands-on Exercises
:::

# 1. Introduction to Shiny

-   **What is Shiny?**

    -   R package for interactive web apps

    -   No web dev expertise needed

-   **When to use**: dashboards, interactive reports, teaching tools

-   **Tutorial sources**:

    -   [RStudio official tutorial](https://shiny.posit.co/r/getstarted)

    -   [*Mastering Shiny* by Hadley Wickham](https://mastering-shiny.org/)

-   [ðŸ”— Launch R](http://tinyurl.com/dna-Rstudio){target="_blank"}: run `shiny::runExample("01_hello")`.

# 2. App Structure {auto-animate="true"}

::: shrink-code
``` {.r code-line-numbers="1-2|3-5|7-9|11" height="200"}
# app.R single-file app
library(shiny)
ui <- fluidPage(
  ...
)

server <- function(input, output) {
  ...
}

shinyApp(ui, server)
```
:::

-   `ui` defines layout and inputs/outputs

-   `server` contains R code & reactivity

# 2. App Structure {auto-animate="true"}

::: shrink-code
``` {.r code-line-numbers="1-2|3-9|11-15|17" height="200"}
# app.R single-file app
library(shiny)
ui <- fluidPage(
  titlePanel("Hello Shiny"),
  sidebarLayout(
    sidebarPanel(sliderInput("obs", "Observations:", 1, 100, 50)),
    mainPanel(plotOutput("distPlot"))
  )
)

server <- function(input, output) {
  output$distPlot <- renderPlot({
    hist(rnorm(input$obs))
  })
}

shinyApp(ui, server)
```
:::

-   `ui` defines layout and inputs/outputs

-   `server` contains R code & reactivity

??? note Compare single-file vs UI/server file structure.

## Shinyapps Gallery

<iframe class="stretch" data-src="https://gallery.shinyapps.io/001-hello/"></iframe>

## Shinyapps Gallery

<iframe class="stretch" data-src="https://gallery.shinyapps.io/050-kmeans-example/"></iframe>

# 3. Inputs & Outputs

-   **Inputs**: `textInput()`, `selectInput()`, `sliderInput()`, etc.

-   **Outputs**: `renderPlot()`, `renderTable()`, `renderUI()`, etc.

-   **Binding**: output objects referenced by `output$...`

``` r
input$slider  # numeric
input$check   # logical
```

## Widgets - Input

<iframe class="stretch" data-src="https://shiny.posit.co/r/gallery/widgets/widget-gallery/"></iframe>

## Widgets - Output Table

<iframe class="stretch" data-src="https://gallery.shinyapps.io/109-render-table/"></iframe>

# 4. Reactivity Fundamentals

-   **Reactive expressions**: cache results

    ``` r
    rv <- reactive({ rnorm(input$obs) })
    output$plot <- renderPlot(hist(rv()))
    ```

-   **Observers**: side-effect actions

    ``` r
    observeEvent(input$go, { showModal(...) })
    ```

-   **isolate()**: break reactive chain

??? note Illustrate dependency graph in real-time.

# 5. Layouts & Styling

-   **Layouts**: `fluidPage()`, `navbarPage()`, `dashboardPage()` (shinydashboard)

-   **HTML tags**: `tags$div()`, `tags$p()`

-   **CSS**: include via `www/styles.css` or `tags$head()`

```         
<link rel="stylesheet" href="styles.css" />
```

??? note Show customizing theme with `bslib`.

# 6. Modules for Reusability

-   **Define module UI**:

    ``` r
    mod_ui <- function(id) {
      ns <- NS(id)
      tagList(
        sliderInput(ns("n"), "N:", 1, 100, 25),
        plotOutput(ns("plot"))
      )
    }
    ```

. . .

-   **Define module server**:

    ``` r
    mod_server <- function(id) {
      moduleServer(id, function(input, output, session) {
        output$plot <- renderPlot(hist(rnorm(input$n)))
      })
    }
    ```

-   **Call modules** in main app

??? note Demonstrate two independent modules on one page.

# 7. Advanced Topics

-   **Dynamic UI**: `renderUI()`, `insertUI()`, `removeUI()`

-   **Interacting with JS**: `shinyjs`, `htmlwidgets`

-   **Bookmarking state**: `enableBookmarking("url")`

-   **Testing & Debugging**: `reactlog`, `shinytest2`

??? note Show `reactlog::reactlog_enable()` in a sample app.

# 8. Deployment & Best Practices

-   **Deployment options**:

    -   Shinyapps.io

    -   RStudio Connect

    -   Docker & Kubernetes

-   **Performance**:

    -   Avoid heavy computations in reactive context

    -   Use `bindCache()`

-   **Security**:

    -   Validate inputs

    -   Use SSL

??? note Walk through deploying to shinyapps.io.

# 9. Hands-on Exercises (30 min)

1.  Build a **data explorer**: filter dataset, show summary & plot.

2.  Create a **module**: reusable histogram component with controls.

3.  Implement **dynamic UI**: show inputs based on user choice.

??? note Pair programming, share solutions afterward.

# Resources & Further Reading

-   RStudio tutorial: https://shiny.rstudio.com/tutorial/

-   *Mastering Shiny*: https://mastering-shiny.org/

-   CRAN: `shiny`, `shinyjs`, `shinydashboard`

??? note Encourage reading chapters on modules and structure.

# Q&A

-   Questions on reactive patterns?

-   Use cases in your projects?

# Thank You

-   Happy coding with Shiny!
