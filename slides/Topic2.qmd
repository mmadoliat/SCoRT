---
title: "Short Course on R Tools"
subtitle: "Building Interactive Web Apps with Shiny"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format:
  revealjs:
    transition: fade
    scrollable: true
---


# Outline

::: {.fragment .fade-up}
-   Introduction to Shiny
-   App Structure: UI & Server
-   Inputs & Outputs
-   Shinyapps Gallery
-   Reactivity, Isolate & Observer
-   Deployment & Best Practices
-   Hands-on Exercises
:::


# Introduction to Shiny

-   **What is Shiny?**

    -   R package for interactive web apps

    -   No web dev expertise needed

-   **When to use**: dashboards, interactive reports, teaching tools

-   **Tutorial sources**:

    -   [RStudio official tutorial](https://shiny.posit.co/r/getstarted)

    -   [*Mastering Shiny* by Hadley Wickham](https://mastering-shiny.org/)

-   [ðŸ”— Launch R](http://tinyurl.com/dna-Rstudio){target="_blank"}: run `shiny::runExample("01_hello")`.

<div style="margin-top: -550px;"></div>

<img src="images/shiny/shiny.png" width="500" style="opacity: 0.05;" align="right">


# Structure of a Shiny App {auto-animate="true"}

::: shrink-code
``` {.r code-line-numbers="1-2|3-5|7-9|11" height="200"}
# app.R single-file app
library(shiny)
ui <- fluidPage(
  ...
)

server <- function(input, output) {
  ...
}

shinyApp(ui, server)
```
:::

-   `ui` defines layout and inputs/outputs

-   `server` contains R code & reactivity


## Structure of a Shiny App {auto-animate="true"}

::: shrink-code
``` {.r code-line-numbers="1-2|3-9|11-15|17" height="200"}
# app.R single-file app
library(shiny)
ui <- fluidPage(
  titlePanel("Hello Shiny"),
  sidebarLayout(
    sidebarPanel(sliderInput("obs", "Observations:", 1, 100, 50)),
    mainPanel(plotOutput("distPlot"))
  )
)

server <- function(input, output) {
  output$distPlot <- renderPlot({
    hist(rnorm(input$obs))
  })
}

shinyApp(ui, server)
```
:::

-   `ui` defines layout and inputs/outputs

-   `server` contains R code & reactivity


## Structure of a Shiny App {auto-animate="true"}

Shiny apps come in two parts:

::: {.columns}

::: {.column .fragment}

### UI

* Defines the layout and appearance.

* Contains elements such as:

  * layout structures (sidebars)
  * inputs (text boxes, sliders, buttons)
  * outputs (plots, tables)

:::

::: {.column .fragment}

### Server

* Performs calculations.

* Contains the logic to respond to user inputs, and update outputs.

* Communicates with the UI to dynamically render outputs.

:::

:::


# Shinyapps Gallery

<iframe class="stretch" data-src="https://gallery.shinyapps.io/001-hello/">

</iframe>

:::{.smallest}
[ðŸ”— Launch R](http://tinyurl.com/dna-Rstudio){target="_blank"}: File > New File > Shiny Web App...
:::


## Exercise

```{r}
#| label: ex-1-timer
#| echo: false
#| eval: true
countdown::countdown(
  minutes = 5,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "0.5em",
  font_size = "2em"
)
```

* Open up your IDE of choice.

* Make sure you have the {shiny} package installed.

* Create an `app.R` file.

* Add `ui` and `server` elements, as well as `shiny::shinyApp(ui, server)`.

* Check it works.


## Shinyapps Gallery

<iframe class="stretch" data-src="https://gallery.shinyapps.io/050-kmeans-example/">

</iframe>


# Inputs & Outputs

-   **Inputs**: `textInput()`, `selectInput()`, `sliderInput()`, etc.

-   **Outputs**: `renderPlot()`, `renderTable()`, `renderUI()`, etc.

-   **Binding**: output objects referenced by `output$...`

``` {.r}
input$slider  # numeric
input$check   # logical
```


## Widgets - Input

<iframe class="stretch" data-src="https://gallery.shinyapps.io/081-widgets-gallery/">

</iframe>


## Widgets - Output Table

<iframe class="stretch" data-src="https://gallery.shinyapps.io/109-render-table/">

</iframe>

:::{.smallest}
[ðŸ”— <\/> VIEW CODE](https://github.com/rstudio/shiny-examples/tree/main/109-render-table/){target="_blank"}
:::


# Reactivity Fundamentals

-   **Reactive expressions**: cache results

    ``` {.r}
    rv <- reactive({ rnorm(input$obs) })
    output$plot <- renderPlot(hist(rv()))
    ```

-   **isolate()**: break reactive chain

    ``` {.r}
    output$summary <- renderText({
      paste0('input$text is "', input$text,
      '", and input$n is ', isolate(input$n))
    })      
    ```

-   **Observers**: side-effect actions

    ``` {.r}
    observeEvent(input$go, { showModal(...) })
    ```


## Reactivity Demo

<iframe class="stretch" data-src="https://gallery.shinyapps.io/003-reactivity/">

</iframe>


## Isolate Demo

<iframe class="stretch" data-src="https://gallery.shinyapps.io/049-isolate-demo/">

</iframe>


## Observers Demo

<iframe class="stretch" data-src="https://gallery.shinyapps.io/055-observer-demo/">

</iframe>


# Deploying a Shiny app 

-   What do we mean by deployment?

    -   Getting the Shiny app off your laptop and out into the world!

. . .

-   *Traditional* deployment

. . .

::: {.columns}

::: {.column}

::: small
-   We need a server to run the R code:
    - shinyapps.io
    - Posit Connect
    - Private server (e.g. university)

:::

:::

::: {.column}

![](images/shiny/deploy.png){fig-align="center" fig-alt="Screenshot of Rstudio" width="90%"}

:::

:::


## Shinylive deployment

![](images/shiny/traditional.png){fig-align="left" fig-alt="Traditional diagram" width="70%"}

::: {style="margin-top: -75px;"}
:::

. . .

![](images/shiny/shinylive.png){fig-align="right" fig-alt="Shinylive diagram" width="70%"}


## Shinylive deployment

See [posit-dev.github.io/r-shinylive](https://posit-dev.github.io/r-shinylive/).

::: {.fragment}

The {shinylive} package converts a standard shiny app into a shinylive app:

```{.r}
install.packages("shinylive")
```

Assuming your `app.R` file is in a folder called `app`:

```{.r}
shinylive::export("app", "site")
```

You can then use the files in the `site` folder to deploy it as a normal website.

*not all R packages are available for shinylive.

**initial load time is still quite slow.

:::


# Tips for building Shiny apps

* Build tests using [shinytest2](https://rstudio.github.io/shinytest2/).

* Building apps as packages helps with dependency management.

* Learn a little bit of HTML, CSS, and Javascript.

* [Modules](https://mastering-shiny.org/scaling-modules.html) are a good way to reuse bits of UI and server code across the application.

* Start with pen and paper... (think about user experience!)


# Hands-on Exercises (30 min) {auto-animate="true"}

![](images/oop/knn2.png){width="1000"}

. . .

-   [KNN Regression via shiny](https://github.com/mmadoliat/WSoRT/blob/main/R/app.R){target="_blank"}


# Resources & Further Reading {auto-animate="true"}

-   RStudio tutorial: [shiny.rstudio.com/tutorial](https://shiny.rstudio.com/tutorial/)

-   Mastering Shiny: [mastering-shiny.org](https://mastering-shiny.org/)

-   ShinyUiEditor: [rstudio.github.io/shinyuieditor](https://rstudio.github.io/shinyuieditor/)

-   Shiny for Python: [shiny.posit.co/py](https://shiny.posit.co/py/)

-   shinythemes: [rstudio.github.io/shinythemes](https://rstudio.github.io/shinythemes/)

-   shinylive examples: [shinylive.io/r/examples/](https://shinylive.io/r/examples/)

-   Examples: [github.com/rstudio/shiny-examples/](https://github.com/rstudio/shiny-examples/)

# Q&A {auto-animate="true"}

<img src="images/shiny/shiny.png" width="500" style="opacity: 0.05;" align="right">

::: {style="margin-top: 200px;"}
:::

:::: {style="text-align: center;"}
::: large
**Thank You**
:::
::::

-   Happy coding with Shiny!
