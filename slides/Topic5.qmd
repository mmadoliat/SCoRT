---
title: "Short Course on R Tools"
subtitle: "Develop your own professional R package"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format: 
  revealjs:
    transition: fade
    scrollable: true
---

# Outline {transition="slide"}

::: incremental
-   Why Build an R Package?
-   System Setup
-   Package Structure
-   Package States in R
-   Create a Package
-   Functions & Documentation
-   Writing Functions and Documenting
-   Build a Simple Package from Scratch
:::

# Why Build an R Package?

::: incremental
-   🧩 **Reusability**: Organize and reuse code across multiple projects\
-   📚 **Documentation**: Provide built-in help files and usage examples\
-   ✅ **Testing**: Systematically check your code with unit tests\
-   🌍 **Distribution**: Share via CRAN, GitHub, or internal repositories\
-   🛠️ **Best Practices**: Improve maintainability and team collaboration
-   🤝 **Open Source & Workflows**: Enable contributions, version control, and community engagement
:::

# System Setup

Make sure you have:

::: {.fragment .fade-up}
**✅ Latest R and RStudio**

-   🛠 Install the latest version of **R**.
-   📥 ownload **RStudio Desktop**: [(link)](https://posit.co/download/rstudio-desktop)
:::

::: {.fragment .fade-up}
**📦 Required Packages:**

Install the essential development tools:

``` r
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
```
:::

## 📦 Key Packages

::: incremental
-   **`devtools`**: Simplifies package development by wrapping complex workflows into easy commands

-   **`roxygen2`**: Generates documentation from special comments in your function code

-   **`testthat`**: Provides a framework for unit testing and ensures your functions work correctly and safely over time

-   **`knitr`**: Powers dynamic report generation and vignette building that integrates code, results, and text using R Markdown
:::

::: {.fragment .fade-up}
> 💡 These tools help automate, test, document, and share your package like a pro.
:::

# Package Structure

## 🧩 Directory layout {auto-animate="true"}

``` text
  mypkg/
  ├── DESCRIPTION         # Package metadata
  ├── NAMESPACE           # Exported functions & imports
  ├── R/                  # Your R functions
  └── man/                # Auto-generated documentation
```

::: {.fragment .fade-up}
> 💡 **Tip:** Many folders in an R package are optional and included as needed.
:::

## 🧩 Directory layout {auto-animate="true"}

``` text
  mypkg/
  ├── DESCRIPTION         # Package metadata
  ├── NAMESPACE           # Exported functions & imports
  ├── R/                  # Your R functions
  ├── man/                # Auto-generated documentation
  ├── tests/              # Unit tests with testthat
  ├── vignettes/          # Long-form documentation (Rmd)
  ├── data/               # Data sets (.rda files)
  └── inst/               # Installed files (e.g., app/, extdata/)
```

## 🛠 Package States in R {transition="zoom"}

R packages transition through five development states:

::: incremental
-   🗂️ **Source**: your raw package folder
-   📦 **Bundled**: compressed .tar.gz for sharing
-   🧱 **Binary**: platform-specific precompiled version
-   📚 **Installed**: available in your R library
-   🧠 **In-Memory**: actively loaded via library()
:::

::: {.fragment .fade-up}
> Understanding these states helps you manage installation, sharing, and usage workflows.
:::

## 🗂️ Source Package {transition="zoom"}

A **source package** is just a folder with a specific structure:

-   `DESCRIPTION` file\
-   `R/` folder with `.R` files\
-   Optional: `man/`, `tests/`, `vignettes/`

::: {.fragment .fade-up}
> It’s editable and human-readable — your starting point for development.
:::

## 📦 Bundled Package

A **bundled package** is a compressed `.tar.gz` file created from a source package.

-   Commonly called a **source tarball**
-   Created using `devtools::build()`
-   Platform-independent format for distribution

::: {.fragment .fade-up}
> It acts as a transportable unit — not directly usable until installed.
:::

## 🧱 Binary Package {transition="zoom"}

A **binary package** is a platform-specific compiled package:

-   Windows: `.zip`
-   macOS: `.tgz`
-   Created using `devtools::build(binary = TRUE)`

::: {.fragment .fade-up}
> Ideal for users without development tools — typically distributed by CRAN.
:::

## 📚 Installed Package {transition="zoom"}

An **installed package** is one that’s been unpacked and placed into a library folder.

-   No longer a single file
-   Ready to be loaded into memory

::: {.fragment .fade-up}
> `install.packages()` or `devtools::install_*()` bring packages into this state.
:::

## 🧠 In-Memory Package {transition="zoom"}

An **in-memory** package is an installed package that’s been loaded into the R session.

-   Use `library(pkgname)` to load
-   Makes all exported functions and objects available

::: {.fragment .fade-up}
> Use `library()` to see loaded packages.
:::

## 🔁 Transitioning Between States {transition="convex"}

![](images/package/install-load.png){fig-align="center" fig-alt="Screenshot of Pagerank" width="55%"}

# Create a Package

Before creating your R package, you need to choose a **name**.

::: {.fragment .fade-up}
> 🧠 This can be the hardest part of the process!
:::

## 📛 Formal Naming Rules

A valid R package name must:

::: incremental
1.  Contain only **letters**, **numbers**, and **periods (`.`)**
2.  **Start with a letter**
3.  **Not end** with a period
:::

::: {.fragment .fade-up}
❌ You **cannot** use:

-   Hyphens `-`
-   Underscores `_`
:::

## 🔍 Naming Tips for Shared Packages

If you plan to share your package:

::: incremental
-   ✅ Choose a **unique** name that's easy to Google\
-   🔎 Avoid names already on **CRAN** or **Bioconductor**
-   ⌨️ Stick to all **lowercase** — e.g., avoid `RGTK2` vs `RGtk2`
-   🗣️ Prefer **pronounceable** names — easier to talk and think about
:::

## 🧠 Naming Patterns and Examples

Evocative Names:

-   `lubridate` → makes **dates** easier\
-   `rvest` → for **web scraping** (like “harvest”)\
-   `r2d3` → tools for **D3 visualizations**\
-   `forcats` → anagram of **factors**

::: {.fragment .fade-up}
### Abbreviations

-   `Rcpp` → **R + C++**
-   `brms` → **Bayesian Regression Models using Stan**
:::

## 🛠️ Creating Your Package

Once you have a name, create the package using either:

::: incremental
-   `usethis::create_package("mypkg")`\
-   **RStudio UI**:\
    *File → New Project → New Directory → R Package*
:::

::: {.fragment .fade-up}
👉 Both options run the same function under the hood.
:::

## 📦 What Gets Created?

::::::: columns
:::: {.column width="70%"}
::: incremental
-   `R/` folder → for your function code\
-   `DESCRIPTION` file → metadata\
-   `NAMESPACE` file → exports/imports\
-   `mypkg.Rproj` → RStudio project file\
-   `.Rbuildignore`, `.gitignore` → build and Git helpers
:::
::::

:::: {.column width="30%"}
::: {.fragment .fade-up}
![](images/package/create_pkg.png){fig-align="center" fig-alt="Screenshot of Pagerank" width="90%"}
:::
::::
:::::::

## DESCRIPTION & NAMESPACE

Two essential files in every R package:

::: incremental
-   📄 `DESCRIPTION`: Metadata about your package (who, what, dependencies)\
-   📦 `NAMESPACE`: Controls what functions are exported and what is imported
:::

## 📄 DESCRIPTION File {auto-animate="true"}

The `DESCRIPTION` file provides overall metadata about your package:

::: incremental
-   Package name and version\
-   Author and maintainer info\
-   Dependencies (`Imports`, `Suggests`)\
-   Description and license\
-   Build-related metadata
:::

## 🧾 Sample DESCRIPTION File {auto-animate="true"}

``` text
Package: Rfssa
Title: Functional Singular Spectrum Analysis
Version: 3.1.0
Authors@R: c(
    person("Hossein", "Haghbin", email = "haghbin@pgu.ac.ir", role = c("aut", "cre"), comment = c(ORCID = "0000-0001-8416-2354")),
    person("Mehdi", "Maadooliat", email = "mehdi.maadooliat@mu.edu", role = "aut", comment = c(ORCID = "0000-0002-5408-2676"))
    )
Maintainer: Hossein Haghbin <haghbin@pgu.ac.ir>
Description: Methods and tools for implementing functional singular spectrum analysis and related techniques.
License: GPL-3
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3
Depends: R (>= 4.0.0)
```

## More Details DESCRIPTION {auto-animate="true"}

``` text
Package: Rfssa
Title: Functional Singular Spectrum Analysis
Version: 3.1.0
Authors@R: c(
    person("Hossein", "Haghbin", email = "haghbin@pgu.ac.ir", role = c("aut", "cre"), comment = c(ORCID = "0000-0001-8416-2354")),
    person("Mehdi", "Maadooliat", email = "mehdi.maadooliat@mu.edu", role = "aut", comment = c(ORCID = "0000-0002-5408-2676"))
    )
Maintainer: Hossein Haghbin <haghbin@pgu.ac.ir>
Description: Methods and tools for implementing functional singular spectrum analysis and related techniques.
License: GPL-3
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3
URL: https://github.com/haghbinh/Rfssa
LazyLoad: true
Imports: Rcpp,fda,lattice,plotly
LinkingTo: Rcpp, RcppArmadillo, RcppEigen,
Suggests: 
    knitr
Depends: R (>= 4.0.0)
```

## 📝 Title vs. Description

**Title**

::: incremental
-   One line\
-   No punctuation or markup\
-   Capitalize like a title\
-   Keep under \~65 characters
:::

. . .

**Description**

::: incremental
-   One paragraph, plain text\
-   Multiple sentences OK\
-   Should describe what the package does
:::

## 🧪 Example from `ggplot2`:

``` text
Title: Create Elegant Data Visualisations Using the Grammar of Graphics
Description: A system for 'declaratively' creating graphics,
  based on "The Grammar of Graphics". You provide the data,
  tell 'ggplot2' how to map variables to aesthetics, what
  graphical primitives to use, and it takes care of the details.
```

## 📦 Imports vs. Suggests

**Imports**

::: incremental
-   Packages required at runtime
-   Automatically installed with your package
-   Needed for core functionality
:::

. . .

**Suggests**

::: incremental
-   Optional or development-time dependencies
-   Used in examples, tests, or vignettes
-   Not required to run the core package
:::

::: {.fragment .fade-up}
> Use `usethis::use_package("pkg", type = "Imports")` to manage these easily.
:::

## 📂 NAMESPACE File

The `NAMESPACE` file defines the **interface** of your package.

It controls:

::: incremental
-   What functions your package **exports**
-   What functions it **imports** from other packages
-   S3/S4 method registrations (if needed)
:::

::: {.fragment .fade-up}
> This file is auto-generated by **roxygen2**, so you typically don’t edit it by hand.
:::

## 🧾 Example: NAMESPACE File

``` text
# Generated by roxygen2: do not edit by hand
S3method("*", funts)
export(as.funts)
import(shiny)
importFrom(ggplot2, ggplot)
```

. . .

-   `export()` — makes a function available to users

-   `import()` — brings in all exported objects from a package

-   `importFrom()` — imports specific functions

-   `S3method()` — registers an S3 method

## ✍️ How to Generate NAMESPACE 

In `.R` files:

```r
#' @export
r_func <- function(x) { ... }
```
. . .

In `.cpp` files:

```cpp
// [[Rcpp::export]]
double myRcpp-func(int x, double y) { ... }
```

# Functions & Documentation

To add functionality to your package, you’ll write:

::: incremental
-   ✅ Functions — saved as `.R` scripts in the `R/` folder\
-   📝 Documentation — using **roxygen2** comments above each function
:::

::: {.fragment .fade-up}
> Let’s walk through the process.
:::

## 📂 Code Placement

All your functions go in the `R/` folder.

``` text
mypkg/
├── R/
│   ├── my_function.R
│   └── helpers.R
```

Each `.R` file can contain one or more functions.

## 📝 Documenting Functions with Roxygen2

Use special comments starting with `#'` to write function documentation:

``` r
#' Sum of Square Function
#'
#' This function computes the Sum of Squares of a numeric vector
#' 
#' @param x Numeric vector
#' @return Numeric sum of x
#'
#' @examples
#' x <- 1:5
#' y <- my_function(x)
#' print(y)
#'
my_function <- function(x) sum(x^2)
```

This will generate help files in the **man/** folder.

## ⚙️ Generate Documentation

After writing your function and roxygen2 comments, run:

``` r
devtools::document()
```

This will:

::: incremental
-   Update the NAMESPACE file

-   Create `.Rd` help files in the man/ folder
:::

::: {.fragment .fade-up}
💡 You can also press `Ctrl+Shift+D` in RStudio.
:::

# Build a Simple Package from Scratch

## 🧱 Step 1: Create Your Package

Use `usethis` to create a new package directory:

``` r
usethis::create_package("minipkg")
```

This creates:

::: incremental
-   **R/, DESCRIPTION, NAMESPACE**

-   `.Rproj`, `.gitignore`, `.Rbuildignore`

-   Opens new RStudio project for your package
:::

## 2️⃣ Add a Dataset

Let’s include a built-in dataset (mtcars) for simplicity:

``` r
usethis::use_data(mtcars, overwrite = TRUE)
```
. . .

This creates a **data/mtcars.rda** file — accessible via

```r
minipkg::mtcars
```

## 3️⃣ Create a Function

Create a new file: **R/summary_stats.R**

```{.r code-line-numbers="1-11|12-18" height="200"}
#' Compute Summary Statistics
#'
#' Returns mean and standard deviation for each numeric column.
#'
#' @param data A data frame with numeric columns
#' @return A data frame with `mean` and `sd` per column
#'
#' @examples
#' summary_stats(mtcars)
#'
#' @export
summary_stats <- function(data) {
  numeric_data <- data[sapply(data, is.numeric)]
  data.frame(
    mean = sapply(numeric_data, mean),
    sd = sapply(numeric_data, sd)
  )
}
```

## 4️⃣ Document the Function

Run the following command to generate docs:

``` r
devtools::document()
```

This will:

::: incremental
-   Add `export(summary_stats)` to your **NAMESPACE**

-   Create **man/summary_stats.Rd**
:::

## 5️⃣ Load and Test the Package

In the console:

``` r
devtools::load_all()
```

::: {.fragment .fade-up}
Then test the function:

``` r
summary_stats(mtcars)
```
:::

::: {.fragment .fade-up}
You should see:

``` text
                mean         sd
mpg        20.090625  6.0269481
cyl         6.187500  1.7859216
disp      230.721875 123.9386938
```
:::

## 6️⃣ Build and Install the Package

Build the package locally:

``` r
devtools::build()
```

::: {.fragment .fade-up}
Install it:

``` r
devtools::install()
```
:::

::: {.fragment .fade-up}
Now you can use it like any other package:

``` r
library(minipkg)
summary_stats(mtcars)
```
:::

## 🚀 `help("summary_stats")` {transition="convex"}

![](images/package/help.png){fig-align="center" fig-alt="Screenshot of Pagerank" width="55%"}

# Hands-on Exercises (30 min)

::: incremental
1.  Create a new package skeleton and add a simple function
2.  Write roxygen docs and generate help files
:::

# Resources & Further Reading

-   **Books**: *R Packages* by Hadley Wickham (<https://r-pkgs.org>)
-   **devtools**: <https://devtools.r-lib.org>
-   **usethis**: helper functions
-   **CRAN Repository Policy**: CRAN manual

# 🙏 Thank you!

Questions & Discussion
