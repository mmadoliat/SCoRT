---
title: "Short Course on R Tools"
subtitle: "Introduction to Rcpp"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format: revealjs
---

## Outline

::: incremental
-   Motivation & Introduction
-   Getting Started with `cppFunction()`
-   Using `sourceCpp()`
-   Data Types & Conversions
-   Rcpp Classes: Lists, DataFrames, Functions, Attributes
-   Handling Missing Values
-   Standard Template Library (STL)
-   Case Studies & Benchmarks
-   Using Rcpp in Packages
-   Advanced Topics & Resources
:::

# Motivation & Introduction

-   **Performance Bottlenecks**: loops, recursion, complex operations

-   **Rcpp**: smooth bridge between R and C++

. . .

-   **Advantages**:

    -   Low overhead function calls
    -   Access to STL (data structures & algorithms)
    -   Cleaner, maintainable code

??? note Identify real bottlenecks with profiling before using C++.

## Auto-Animate {auto-animate="true" auto-animate-easing="ease-in-out" auto-animate-duration="1.5"}

``` {.cpp}
// Define and compile inline C++ function
  return x - y - z;
int add(int x, int y, int z) {
  return x - y - z;
  return x - y - z;
}
```

## Auto-Animate {auto-animate="true" auto-animate-easing="ease-in-out" auto-animate-duration="1.5"}

``` cpp
// Define and compile inline C++ function
int add(int x, int y, int z) {
  return x + y + z;
}
```

# Using `cppFunction()`

``` cpp
// Define and compile inline C++ function
int add(int x, int y, int z) {
  return x + y + z;
}
```

-   Use `cppFunction()` in R console or script
-   Fast prototyping & testing
-   Good for small functions

??? note Show live demo: adding two numbers with `cppFunction()`.

# Using `sourceCpp()`

-   Create standalone `.cpp` files with:

    ``` cpp
    #include <Rcpp.h>
    using namespace Rcpp;
    // [[Rcpp::export]]
    double meanC(NumericVector x) { ... }
    ```

-   Compile with `sourceCpp('file.cpp')`

-   Benefits:

    -   Editor support (syntax highlighting)
    -   Easier debugging & error tracking

??? note Highlight difference between inline and file-based C++.

# Data Types & Conversions

-   **R vectors ↔ C++ classes**:

    -   `NumericVector`, `IntegerVector`, `CharacterVector`, `LogicalVector`

-   **Scalars**: `double`, `int`, `String`, `bool`

-   **Key methods**:

    -   `.size()`, `.begin()`, `.end()`
    -   Constructors: `NumericVector out(n)`

??? note Emphasize zero-based indexing in C++!

# Rcpp Core Classes

## Lists & DataFrames

-   `List`, `DataFrame` wrappers
-   Access with `as<>()`, `.inherits()`, `.attr()`

## Functions

-   `Function f` & `RObject` return type

-   Positional vs named args:

    ``` cpp
    f(_["x"] = xval, _["y"] = yval);
    ```

## Attributes

-   Query/modify with `.attr()` and `.names()`
-   Create with `Vector::create()`

??? note Quick example: extracting residuals from `lm`.

# Handling Missing Values

-   **Scalars**: `NA_INTEGER`, `NA_REAL`, `NA_LOGICAL`, `NA_STRING`
-   **Vectors**: explicit use of NA constants
-   Beware of C++ arithmetic on NA: e.g. `NA_INTEGER + 1`

??? note Demonstrate `evalCpp("NA_REAL + 1")`.

# Standard Template Library (STL)

## Iterators & Algorithms

-   Range-based `for(const auto &x : xs)`
-   `std::accumulate`, `std::min_element`, etc.

## Data Structures

-   `std::vector`, `std::unordered_set`, `std::unordered_map`
-   Efficient growth & lookup

??? note Show run-length encoding (`rleC`) example.

# Case Studies & Benchmarks

## Gibbs Sampler

``` cpp
// [[Rcpp::export]]
NumericMatrix gibbs_cpp(int N, int thin) { ... }
```

-   \~20× speedup vs R

## Agent-Based Model

-   R vectorisation vs Rcpp loops
-   Memory overhead comparisons

??? note Plot benchmark timings side-by-side.

# Using Rcpp in Packages

-   Add to package:

    -   `LinkingTo: Rcpp` in DESCRIPTION
    -   `useDynLib(pkg)` & `importFrom(Rcpp, sourceCpp)` in NAMESPACE

-   `usethis::use_rcpp()` automates setup

-   Run `Rcpp::compileAttributes()` to generate bindings

??? note Recommend best practices for CI & testing.

# Advanced Topics & Resources

-   **Attributes vignette**: `vignette('Rcpp-attributes')`
-   **Modules**: expose C++ classes to R
-   **RcppGSL**, **RcppArmadillo** for specialized libraries
-   Books: *Effective C++*, *Effective STL*
-   Online: Rcpp homepage, mailing list

??? note Encourage exploring community resources.

# Summary & Q&A

-   Key takeaways:

    1.  Profile before optimizing
    2.  Inline vs file-based workflows
    3.  Master data conversions & STL

-   Questions?

# Thank You

-   [rcpp.org](https://www.rcpp.org)
-   [Hadley Wickham,*Advanced R*](https://adv-r.hadley.nz/rcpp.html)
