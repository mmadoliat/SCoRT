---
title: "Short Course on R Tools"
subtitle: "Develop your own professional R package"
title-slide-attributes:
  data-background-image: mu-bg.png
  data-background-size: stretch
  data-slide-number: none
format: 
  revealjs:
    transition: fade
    scrollable: true
---

# Outline {transition="slide"}

::: incremental
-   Why Build an R Package?
-   Package Structure & Setup
-   Building, Installing, and Checking Your Package
-   Writing Functions and Documenting
-   DESCRIPTION and NAMESPACE Files
-   Testing with `testthat`
-   Vignettes and Articles for Extended Documentation
-   Continuous Integration & Quality Checks
-   Building, Checking & Installing
-   CRAN Submission & Maintenance
-   Interactive Hands-on: Build Your First Package
:::

# 1. Why Build an R Package?

::: incremental
-   🧩 **Reusability**: Organize and reuse code across multiple projects\
-   📚 **Documentation**: Provide built-in help files and usage examples\
-   ✅ **Testing**: Systematically check your code with unit tests\
-   🌍 **Distribution**: Share via CRAN, GitHub, or internal repositories\
-   🛠️ **Best Practices**: Improve maintainability and team collaboration
-   🤝 **Open Source & Workflows**: Enable contributions, version control, and community engagement
:::

## ⚙️ System Setup

Make sure you have:

::: {.fragment .fade-up}
**✅ Latest R and RStudio**

-   🛠 Install the latest version of **R**.
-   📥 ownload **RStudio Desktop**: [(link)](https://posit.co/download/rstudio-desktop)
:::

::: {.fragment .fade-up}
**📦 Required Packages:**

Install the essential development tools:

``` r
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
```
:::

## 📦 Key Packages

::: incremental
-   **`devtools`**: Simplifies package development by wrapping complex workflows into easy commands

-   **`roxygen2`**: Generates documentation from special comments in your function code

-   **`testthat`**: Provides a framework for unit testing and ensures your functions work correctly and safely over time

-   **`knitr`**: Powers dynamic report generation and vignette building that integrates code, results, and text using R Markdown
:::

::: {.fragment .fade-up}
> 💡 These tools help automate, test, document, and share your package like a pro.
:::

# 2. Package Structure

## 🧩 Directory layout {auto-animate="true"}

``` text
  mypkg/
  ├── DESCRIPTION         # Package metadata
  ├── NAMESPACE           # Exported functions & imports
  ├── R/                  # Your R functions
  └── man/                # Auto-generated documentation
```

::: {.fragment .fade-up}
> 💡 **Tip:** Many folders in an R package are optional and included as needed.
:::

## 🧩 Directory layout {auto-animate="true"}

``` text
  mypkg/
  ├── DESCRIPTION         # Package metadata
  ├── NAMESPACE           # Exported functions & imports
  ├── R/                  # Your R functions
  ├── man/                # Auto-generated documentation
  ├── tests/              # Unit tests with testthat
  ├── vignettes/          # Long-form documentation (Rmd)
  ├── data/               # Data sets (.rda files)
  └── inst/               # Installed files (e.g., app/, extdata/)
```

# 3. Package States in R {transition="zoom"}

R packages go through **five states** during development and usage:

-   🗂️ **Source**
-   📦 **Bundled**
-   🧱 **Binary**
-   📚 **Installed**
-   🧠 **In-Memory**

::: {.fragment .fade-up}
> Understanding these states helps you manage installation, sharing, and usage workflows.
:::

## 🗂️ Source Package {transition="zoom"}

A **source package** is just a folder with a specific structure:

-   `DESCRIPTION` file\
-   `R/` folder with `.R` files\
-   Optional: `man/`, `tests/`, `vignettes/`

::: {.fragment .fade-up}
> It’s editable and human-readable — your starting point for development.
:::

## 📦 Bundled Package

A **bundled package** is a compressed `.tar.gz` file created from a source package.

-   Commonly called a **source tarball**
-   Created using `devtools::build()`
-   Platform-independent format for distribution

::: {.fragment .fade-up}
> It acts as a transportable unit — not directly usable until installed.
:::

## 🧱 Binary Package {transition="zoom"}

A **binary package** is a platform-specific compiled package:

-   Windows: `.zip`
-   macOS: `.tgz`
-   Created using `devtools::build(binary = TRUE)`

::: {.fragment .fade-up}
> Ideal for users without development tools — typically distributed by CRAN.
:::

## 📚 Installed Package {transition="zoom"}

An **installed package** is one that’s been unpacked and placed into a library folder.

-   No longer a single file
-   Ready to be loaded into memory

::: {.fragment .fade-up}
> `install.packages()` or `devtools::install_*()` bring packages into this state.
:::

## 🧠 In-Memory Package {transition="zoom"}

An **in-memory** package is an installed package that’s been loaded into the R session.

-   Use `library(pkgname)` to load
-   Makes all exported functions and objects available

::: {.fragment .fade-up}
> Use `library()` to see loaded packages.
:::

## 🔁 Transitioning Between States {transition="convex"}

![](images/package/install-load.png){fig-align="center" fig-alt="Screenshot of Pagerank" width="55%"}

# 4. Create a Package

Before creating your R package, you need to choose a **name**.

::: {.fragment .fade-up}
> 🧠 This can be the hardest part of the process!
:::

## 📛 Formal Naming Rules

A valid R package name must:

::: incremental
1.  Contain only **letters**, **numbers**, and **periods (`.`)**
2.  **Start with a letter**
3.  **Not end** with a period
:::

::: {.fragment .fade-up}
❌ You **cannot** use:

-   Hyphens `-`
-   Underscores `_`
:::

## 🔍 Naming Tips for Shared Packages

If you plan to share your package:

::: incremental
-   ✅ Choose a **unique** name that's easy to Google\
-   🔎 Avoid names already on **CRAN** or **Bioconductor**
-   ⌨️ Stick to all **lowercase** — e.g., avoid `RGTK2` vs `RGtk2`
-   🗣️ Prefer **pronounceable** names — easier to talk and think about
:::

## 🧠 Naming Patterns and Examples

Evocative Names:

-   `lubridate` → makes **dates** easier\
-   `rvest` → for **web scraping** (like “harvest”)\
-   `r2d3` → tools for **D3 visualizations**\
-   `forcats` → anagram of **factors**

::: {.fragment .fade-up}
### Abbreviations

-   `Rcpp` → **R + C++**
-   `brms` → **Bayesian Regression Models using Stan**
:::

## 🛠️ Creating Your Package

Once you have a name, create the package using either:

::: incremental
-   `usethis::create_package("mypkg")`\
-   **RStudio UI**:\
    *File → New Project → New Directory → R Package*
:::

::: {.fragment .fade-up}
👉 Both options run the same function under the hood.
:::

## 📦 What Gets Created?

::::::: columns
:::: {.column width="70%"}
::: incremental
-   `R/` folder → for your function code\
-   `DESCRIPTION` file → metadata\
-   `NAMESPACE` file → exports/imports\
-   `mypkg.Rproj` → RStudio project file\
-   `.Rbuildignore`, `.gitignore` → build and Git helpers
:::
::::

:::: {.column width="30%"}
::: {.fragment .fade-up}
![](images/package/create_pkg.png){fig-align="center" fig-alt="Screenshot of Pagerank" width="90%"}
:::
::::
:::::::

## ⚙️ Quick Setup with {usethis}

``` r
    usethis::create_package("mypkg")
    usethis::use_git()
    usethis::use_build_ignore("devtools_history.R")
```

<!-- # note Show live demo: `create_package()` workflow. -->

# 3. DESCRIPTION & NAMESPACE

## DESCRIPTION

-   Fields: `Package`, `Version`, `Title`, `Description`, `Author`, `Depends`, `Imports`, `Suggests`, `License`
-   Semantic versioning: `major.minor.patch`

## NAMESPACE

-   Export functions: `export()`
-   Import from other packages: `importFrom(dplyr, select)`
-   Generate with roxygen2 or manually

``` r
#' @export
my_function <- function(x) x + 1
```

??? note Emphasize keeping `Imports` minimal.

# 4. Functions & Documentation

-   **Code placement**: scripts in `R/`

-   **Roxygen comments**:

    ``` r
    #' Title
    #'
    #' @param x Numeric vector
    #' @return Numeric
    #' @examples
    #' my_function(1:5)
    my_function <- function(x) sum(x)
    ```

-   **Generate docs**:

    ``` r
    devtools::document()
    ```

??? note Highlight best practices for examples and topics.

# 5. Testing with `testthat`

-   **Setup**:

    ``` r
    usethis::use_testthat()
    ```

-   **Write tests** in `tests/testthat/`:

    ``` r
    test_that("sum works", {
      expect_equal(my_function(1,2), 3)
    })
    ```

-   **Run tests**:

    ``` r
    devtools::test()
    ```

??? note Stress importance of edge-case tests.

# 6. Continuous Integration & QA

-   **CI services**: GitHub Actions, Travis CI, GitLab CI

-   **Setup with usethis**:

    ``` r
    usethis::use_github_action_check_standard()
    ```

-   **Code coverage**: `covr`, Codecov

-   **Linting**: `lintr`, `goodpractice`

??? note Show sample GitHub Actions YAML.

# 7. Vignettes & Articles

-   **Long-form documentation**:

    ``` r
    usethis::use_vignette("intro")
    ```

-   **R Markdown** in `vignettes/`

-   **Build & preview**:

    ``` r
    devtools::build_vignettes()
    ```

??? note Encourage rich examples and narratives.

# 8. Building, Checking & Installing

-   **Build package**:

    ``` r
    devtools::build()
    ```

-   **Check package**:

    ``` r
    devtools::check()
    ```

-   **Install locally**:

    ``` r
    devtools::install()
    ```

-   **Binary vs source**: options for Windows/Mac

??? note Explain common check errors and fixes.

# 9. CRAN Submission & Maintenance

-   **CRAN policies**: style, dependencies, tests

-   **Submit**:

    ``` r
    devtools::release()
    ```

-   **News/Changelog**: `NEWS.md`

-   **Version control**: tagging releases

-   **Maintaining**: issues, pull requests, documentation updates

??? note Review CRAN incoming checks and email workflows.

# 10. Hands-on Exercises (30 min)

1.  Create a new package skeleton and add a simple function
2.  Write roxygen docs and generate help files
3.  Add tests for edge cases and set up CI
4.  Draft a vignette showcasing function usage

??? note Pair up and share GitHub repo links.

# Resources & Further Reading

-   **Books**: *R Packages* by Hadley Wickham (<https://r-pkgs.org>)
-   **devtools**: <https://devtools.r-lib.org>
-   **usethis**: helper functions
-   **CRAN Repository Policy**: CRAN manual

??? note Provide cheat-sheet links.

# Q&A

-   Questions on package workflows?
-   Real-world package examples?

# Thank You

-   Happy packaging with R!
